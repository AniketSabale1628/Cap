{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\CuvettReact\\\\CapstoneProject\\\\main\\\\src\\\\pages\\\\Browser.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer';\nimport './CountdownTimer.css'; // Import your custom CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CountdownTimer = () => {\n  _s();\n  const totalSeconds = 3 * 60 * 60; // 3 hours in seconds\n  const [background, setBackground] = useState('#004777'); // Initial background color\n\n  // Use useEffect to change the background color every second\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setBackground(generateRandomColor());\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n\n  // Function to generate a random color\n  const generateRandomColor = () => {\n    const letters = '0123456789ABCDEF';\n    let color = '#';\n    for (let i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"countdown-timer-container\",\n    children: /*#__PURE__*/_jsxDEV(CountdownCircleTimer, {\n      isPlaying: true,\n      duration: totalSeconds,\n      colors: [background, background],\n      strokeWidth: 6 // Adjust the stroke width as needed\n      ,\n      size: 150 // Adjust the size of the timer as needed\n      ,\n      trailColor: \"transparent\" // Hide the trail\n      ,\n      isLinearGradient: true,\n      rotation: \"counterclockwise\" // Make the animation counterclockwise\n      ,\n      children: ({\n        remainingTime,\n        animatedColor\n      }) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timer-text\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            color: animatedColor\n          },\n          children: formatTime(remainingTime)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n\n// Function to format remaining time into HH:MM:SS format\n_s(CountdownTimer, \"5p2UjOYy+N+cbgHkgA7nDtiYtY0=\");\n_c = CountdownTimer;\nconst formatTime = remainingTime => {\n  const hours = Math.floor(remainingTime / 3600);\n  const minutes = Math.floor(remainingTime % 3600 / 60);\n  const seconds = remainingTime % 60;\n  return `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;\n};\nexport default CountdownTimer;\nvar _c;\n$RefreshReg$(_c, \"CountdownTimer\");","map":{"version":3,"names":["React","useState","useEffect","CountdownCircleTimer","jsxDEV","_jsxDEV","CountdownTimer","_s","totalSeconds","background","setBackground","interval","setInterval","generateRandomColor","clearInterval","letters","color","i","Math","floor","random","className","children","isPlaying","duration","colors","strokeWidth","size","trailColor","isLinearGradient","rotation","remainingTime","animatedColor","style","formatTime","fileName","_jsxFileName","lineNumber","columnNumber","_c","hours","minutes","seconds","String","padStart","$RefreshReg$"],"sources":["C:/Users/HP/Desktop/CuvettReact/CapstoneProject/main/src/pages/Browser.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer';\r\nimport './CountdownTimer.css'; // Import your custom CSS file\r\n\r\nconst CountdownTimer = () => {\r\n  const totalSeconds = 3 * 60 * 60; // 3 hours in seconds\r\n  const [background, setBackground] = useState('#004777'); // Initial background color\r\n\r\n  // Use useEffect to change the background color every second\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setBackground(generateRandomColor());\r\n    }, 1000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  // Function to generate a random color\r\n  const generateRandomColor = () => {\r\n    const letters = '0123456789ABCDEF';\r\n    let color = '#';\r\n    for (let i = 0; i < 6; i++) {\r\n      color += letters[Math.floor(Math.random() * 16)];\r\n    }\r\n    return color;\r\n  };\r\n\r\n  return (\r\n    <div className=\"countdown-timer-container\">\r\n      <CountdownCircleTimer\r\n        isPlaying\r\n        duration={totalSeconds}\r\n        colors={[background, background]}\r\n        strokeWidth={6} // Adjust the stroke width as needed\r\n        size={150} // Adjust the size of the timer as needed\r\n        trailColor=\"transparent\" // Hide the trail\r\n        isLinearGradient={true}\r\n        rotation=\"counterclockwise\" // Make the animation counterclockwise\r\n      >\r\n        {({ remainingTime, animatedColor }) => (\r\n          <div className=\"timer-text\">\r\n            <div style={{ color: animatedColor }}>{formatTime(remainingTime)}</div>\r\n          </div>\r\n        )}\r\n      </CountdownCircleTimer>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Function to format remaining time into HH:MM:SS format\r\nconst formatTime = (remainingTime) => {\r\n  const hours = Math.floor(remainingTime / 3600);\r\n  const minutes = Math.floor((remainingTime % 3600) / 60);\r\n  const seconds = remainingTime % 60;\r\n  return `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;\r\n};\r\n\r\nexport default CountdownTimer;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,oBAAoB,QAAQ,8BAA8B;AACnE,OAAO,sBAAsB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE/B,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAMC,YAAY,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;EAClC,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC;;EAEzD;EACAC,SAAS,CAAC,MAAM;IACd,MAAMS,QAAQ,GAAGC,WAAW,CAAC,MAAM;MACjCF,aAAa,CAACG,mBAAmB,CAAC,CAAC,CAAC;IACtC,CAAC,EAAE,IAAI,CAAC;IAER,OAAO,MAAMC,aAAa,CAACH,QAAQ,CAAC;EACtC,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAME,mBAAmB,GAAGA,CAAA,KAAM;IAChC,MAAME,OAAO,GAAG,kBAAkB;IAClC,IAAIC,KAAK,GAAG,GAAG;IACf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1BD,KAAK,IAAID,OAAO,CAACG,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;IAClD;IACA,OAAOJ,KAAK;EACd,CAAC;EAED,oBACEX,OAAA;IAAKgB,SAAS,EAAC,2BAA2B;IAAAC,QAAA,eACxCjB,OAAA,CAACF,oBAAoB;MACnBoB,SAAS;MACTC,QAAQ,EAAEhB,YAAa;MACvBiB,MAAM,EAAE,CAAChB,UAAU,EAAEA,UAAU,CAAE;MACjCiB,WAAW,EAAE,CAAE,CAAC;MAAA;MAChBC,IAAI,EAAE,GAAI,CAAC;MAAA;MACXC,UAAU,EAAC,aAAa,CAAC;MAAA;MACzBC,gBAAgB,EAAE,IAAK;MACvBC,QAAQ,EAAC,kBAAkB,CAAC;MAAA;MAAAR,QAAA,EAE3BA,CAAC;QAAES,aAAa;QAAEC;MAAc,CAAC,kBAChC3B,OAAA;QAAKgB,SAAS,EAAC,YAAY;QAAAC,QAAA,eACzBjB,OAAA;UAAK4B,KAAK,EAAE;YAAEjB,KAAK,EAAEgB;UAAc,CAAE;UAAAV,QAAA,EAAEY,UAAU,CAACH,aAAa;QAAC;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpE;IACN;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACmB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpB,CAAC;AAEV,CAAC;;AAED;AAAA/B,EAAA,CA7CMD,cAAc;AAAAiC,EAAA,GAAdjC,cAAc;AA8CpB,MAAM4B,UAAU,GAAIH,aAAa,IAAK;EACpC,MAAMS,KAAK,GAAGtB,IAAI,CAACC,KAAK,CAACY,aAAa,GAAG,IAAI,CAAC;EAC9C,MAAMU,OAAO,GAAGvB,IAAI,CAACC,KAAK,CAAEY,aAAa,GAAG,IAAI,GAAI,EAAE,CAAC;EACvD,MAAMW,OAAO,GAAGX,aAAa,GAAG,EAAE;EAClC,OAAQ,GAAEY,MAAM,CAACH,KAAK,CAAC,CAACI,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAE,IAAGD,MAAM,CAACF,OAAO,CAAC,CAACG,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAE,IAAGD,MAAM,CAACD,OAAO,CAAC,CAACE,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAE,EAAC;AACpH,CAAC;AAED,eAAetC,cAAc;AAAC,IAAAiC,EAAA;AAAAM,YAAA,CAAAN,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}