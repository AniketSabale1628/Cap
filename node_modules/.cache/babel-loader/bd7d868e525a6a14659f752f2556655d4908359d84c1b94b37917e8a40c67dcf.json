{"ast":null,"code":"// import axios from \"axios\";\n// import { useEffect, useState } from \"react\";\n\n// import React from 'react'\n\n// const Browser = () => {\n//   const [selectedCategories , setMoviesByCategory]=useState([])\n\n//   useEffect(() => {\n//     const apiKey = 'b39fae28754f0a221a142410e8071a31';\n\n//     const fetchMovies = async (category) => {\n//       try {\n//         const response = await axios.get('https://api.themoviedb.org/3/search/movie', {\n//           params: {\n//             api_key: apiKey,\n//             query: category,\n//           },\n//         });\n\n//         console.log(`Movies for ${category}:`, response.data.results);\n//         return response.data.results;\n//       } catch (error) {\n//         console.error('Error fetching movies:', error);\n//         return [];\n//       }\n//     };\n\n//     const fetchAllMovies = async () => {\n//       const moviesData = await Promise.all(selectedCategories.map(category => fetchMovies(category)));\n//       const moviesByCategory = selectedCategories.reduce((acc, category, index) => {\n//         acc[category] = moviesData[index];\n//         console.log(acc)\n//         return acc;\n//       }, {});\n//       setMoviesByCategory(moviesByCategory);\n//     };\n\n//     fetchAllMovies();\n//   }, [selectedCategories]);\n\n//   return (\n//     <div>\n\n//     </div>\n//   )\n// }\n// 5a0f9c4841msh9890b5c5baf8edep1681a1jsnf4aaf792530d \n// export default Browser\n\nconst url = 'https://imdb8.p.rapidapi.com/auto-complete?q=game';\nconst options = {\n  method: 'GET',\n  headers: {\n    'X-RapidAPI-Key': 'a156d20ca1msh56da3a1dc113240p17f4fajsnf6fd3303e3a7',\n    'X-RapidAPI-Host': 'imdb8.p.rapidapi.com'\n  }\n};\ntry {\n  const response = await fetch(url, options);\n  const result = await response.text();\n  console.log(result.json);\n} catch (error) {\n  console.error(error);\n}","map":{"version":3,"names":["url","options","method","headers","response","fetch","result","text","console","log","json","error"],"sources":["C:/Users/HP/Desktop/CuvettReact/CapstoneProject/main/src/pages/Browser.js"],"sourcesContent":["// import axios from \"axios\";\r\n// import { useEffect, useState } from \"react\";\r\n\r\n// import React from 'react'\r\n\r\n// const Browser = () => {\r\n//   const [selectedCategories , setMoviesByCategory]=useState([])\r\n\r\n//   useEffect(() => {\r\n//     const apiKey = 'b39fae28754f0a221a142410e8071a31';\r\n  \r\n//     const fetchMovies = async (category) => {\r\n//       try {\r\n//         const response = await axios.get('https://api.themoviedb.org/3/search/movie', {\r\n//           params: {\r\n//             api_key: apiKey,\r\n//             query: category,\r\n//           },\r\n//         });\r\n  \r\n//         console.log(`Movies for ${category}:`, response.data.results);\r\n//         return response.data.results;\r\n//       } catch (error) {\r\n//         console.error('Error fetching movies:', error);\r\n//         return [];\r\n//       }\r\n//     };\r\n  \r\n//     const fetchAllMovies = async () => {\r\n//       const moviesData = await Promise.all(selectedCategories.map(category => fetchMovies(category)));\r\n//       const moviesByCategory = selectedCategories.reduce((acc, category, index) => {\r\n//         acc[category] = moviesData[index];\r\n//         console.log(acc)\r\n//         return acc;\r\n//       }, {});\r\n//       setMoviesByCategory(moviesByCategory);\r\n//     };\r\n  \r\n//     fetchAllMovies();\r\n//   }, [selectedCategories]);\r\n\r\n//   return (\r\n//     <div>\r\n      \r\n//     </div>\r\n//   )\r\n// }\r\n// 5a0f9c4841msh9890b5c5baf8edep1681a1jsnf4aaf792530d \r\n// export default Browser\r\n\r\nconst url = 'https://imdb8.p.rapidapi.com/auto-complete?q=game';\r\nconst options = {\r\n\tmethod: 'GET',\r\n\theaders: {\r\n\t\t'X-RapidAPI-Key': 'a156d20ca1msh56da3a1dc113240p17f4fajsnf6fd3303e3a7',\r\n\t\t'X-RapidAPI-Host': 'imdb8.p.rapidapi.com'\r\n\t}\r\n};\r\n\r\ntry {\r\n\tconst response = await fetch(url, options);\r\n\tconst result = await response.text();\r\n\tconsole.log(result.json);\r\n} catch (error) {\r\n\tconsole.error(error);\r\n}"],"mappings":"AAAA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,mDAAmD;AAC/D,MAAMC,OAAO,GAAG;EACfC,MAAM,EAAE,KAAK;EACbC,OAAO,EAAE;IACR,gBAAgB,EAAE,oDAAoD;IACtE,iBAAiB,EAAE;EACpB;AACD,CAAC;AAED,IAAI;EACH,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACL,GAAG,EAAEC,OAAO,CAAC;EAC1C,MAAMK,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;EACpCC,OAAO,CAACC,GAAG,CAACH,MAAM,CAACI,IAAI,CAAC;AACzB,CAAC,CAAC,OAAOC,KAAK,EAAE;EACfH,OAAO,CAACG,KAAK,CAACA,KAAK,CAAC;AACrB"},"metadata":{},"sourceType":"module","externalDependencies":[]}