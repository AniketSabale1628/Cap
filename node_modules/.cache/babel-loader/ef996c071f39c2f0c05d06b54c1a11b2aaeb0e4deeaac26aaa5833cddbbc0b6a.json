{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\CuvettReact\\\\CapstoneProject\\\\main\\\\src\\\\pages\\\\Browser.js\";\nimport React, { useState, useEffect } from 'react';\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer';\nimport { Howl } from 'howler';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Timer = () => {\n  const timerDuration = 4; // Duration in seconds (1 hour)\n  const endTime = Date.now() + timerDuration * 1000;\n  const sound = new Howl({\n    src: './alaram.mp3' // Replace with your audio file\n  });\n\n  const timerCompleted = () => {\n    console.log(\"PLKO\");\n    // console.log(sound ? ('tru'):('f'))\n    const sound = new Howl({\n      src: './alaram.mp3' // Replace with your audio file\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(CountdownCircleTimer, {\n      isPlaying: true,\n      duration: timerDuration,\n      size: 120,\n      strokeWidth: 6,\n      colors: [['#FFA500', 0.33], ['#FF0000', 0.33], ['#0000FF', 0.33]],\n      onComplete: timerCompleted,\n      children: ({\n        remainingTime\n      }) => {\n        const hours = Math.floor(remainingTime / 3600);\n        const minutes = Math.floor(remainingTime % 3600 / 60);\n        const seconds = remainingTime % 60;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [hours, \"h\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [minutes, \"m\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [seconds, \"s\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 13\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n_c = Timer;\nexport default Timer;\nvar _c;\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"names":["React","useState","useEffect","CountdownCircleTimer","Howl","jsxDEV","_jsxDEV","Timer","timerDuration","endTime","Date","now","sound","src","timerCompleted","console","log","children","isPlaying","duration","size","strokeWidth","colors","onComplete","remainingTime","hours","Math","floor","minutes","seconds","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/HP/Desktop/CuvettReact/CapstoneProject/main/src/pages/Browser.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer';\r\nimport { Howl } from 'howler';\r\n\r\nconst Timer = () => {\r\n  const timerDuration = 4; // Duration in seconds (1 hour)\r\n  const endTime = Date.now() + timerDuration * 1000;\r\n  const sound = new Howl({\r\n    src:'./alaram.mp3' // Replace with your audio file\r\n  });\r\n\r\n  const timerCompleted = () => {\r\n    console.log(\"PLKO\")\r\n    // console.log(sound ? ('tru'):('f'))\r\n    const sound = new Howl({\r\n      src:'./alaram.mp3' // Replace with your audio file\r\n    });\r\n\r\n    \r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <CountdownCircleTimer\r\n        isPlaying\r\n        duration={timerDuration}\r\n        size={120}\r\n        strokeWidth={6}\r\n        colors={[['#FFA500', 0.33], ['#FF0000', 0.33], ['#0000FF', 0.33]]}\r\n        onComplete={timerCompleted}\r\n      >\r\n        {({ remainingTime }) => {\r\n          const hours = Math.floor(remainingTime / 3600);\r\n          const minutes = Math.floor((remainingTime % 3600) / 60);\r\n          const seconds = remainingTime % 60;\r\n\r\n          return (\r\n            <div>\r\n              <div>{hours}h</div>\r\n              <div>{minutes}m</div>\r\n              <div>{seconds}s</div>\r\n            </div>\r\n          );\r\n        }}\r\n      </CountdownCircleTimer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Timer;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,oBAAoB,QAAQ,8BAA8B;AACnE,SAASC,IAAI,QAAQ,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9B,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAClB,MAAMC,aAAa,GAAG,CAAC,CAAC,CAAC;EACzB,MAAMC,OAAO,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGH,aAAa,GAAG,IAAI;EACjD,MAAMI,KAAK,GAAG,IAAIR,IAAI,CAAC;IACrBS,GAAG,EAAC,cAAc,CAAC;EACrB,CAAC,CAAC;;EAEF,MAAMC,cAAc,GAAGA,CAAA,KAAM;IAC3BC,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;IACnB;IACA,MAAMJ,KAAK,GAAG,IAAIR,IAAI,CAAC;MACrBS,GAAG,EAAC,cAAc,CAAC;IACrB,CAAC,CAAC;EAGJ,CAAC;;EAED,oBACEP,OAAA;IAAAW,QAAA,eACEX,OAAA,CAACH,oBAAoB;MACnBe,SAAS;MACTC,QAAQ,EAAEX,aAAc;MACxBY,IAAI,EAAE,GAAI;MACVC,WAAW,EAAE,CAAE;MACfC,MAAM,EAAE,CAAC,CAAC,SAAS,EAAE,IAAI,CAAC,EAAE,CAAC,SAAS,EAAE,IAAI,CAAC,EAAE,CAAC,SAAS,EAAE,IAAI,CAAC,CAAE;MAClEC,UAAU,EAAET,cAAe;MAAAG,QAAA,EAE1BA,CAAC;QAAEO;MAAc,CAAC,KAAK;QACtB,MAAMC,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACH,aAAa,GAAG,IAAI,CAAC;QAC9C,MAAMI,OAAO,GAAGF,IAAI,CAACC,KAAK,CAAEH,aAAa,GAAG,IAAI,GAAI,EAAE,CAAC;QACvD,MAAMK,OAAO,GAAGL,aAAa,GAAG,EAAE;QAElC,oBACElB,OAAA;UAAAW,QAAA,gBACEX,OAAA;YAAAW,QAAA,GAAMQ,KAAK,EAAC,GAAC;UAAA;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACnB3B,OAAA;YAAAW,QAAA,GAAMW,OAAO,EAAC,GAAC;UAAA;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACrB3B,OAAA;YAAAW,QAAA,GAAMY,OAAO,EAAC,GAAC;UAAA;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAClB,CAAC;MAEV;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACmB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpB,CAAC;AAEV,CAAC;AAACC,EAAA,GA3CI3B,KAAK;AA6CX,eAAeA,KAAK;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}