{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import image from '../assets/Vector_tri.png';\n// import image1 from '../assets/Vector_trr.png';\n// import './Stopwatch.css';\n// // import './CountdownTimer.css';\n// // import Counter from './Counter';\n// import { useNavigate } from \"react-router-dom\";\n// import { CountdownCircleTimer } from 'react-countdown-circle-timer'\n// // let audioElement = new Audio('../assets/10.mp3');\n// // import React { useState, useEffect } from 'react';\n\n// function Stopwatch() {\n//   const [isRunning, setIsRunning] = useState(false);\n//   const [hours, setHours] = useState(0);\n//   const [minutes, setMinutes] = useState(0);\n//   const [seconds, setSeconds] = useState(0);\n\n// //   const formatTime = (h, m, s) => {\n// //     return `${h}h ${m}m ${s}s`;\n// //   };\n\n//   const totalSeconds = hours * 3600 + minutes * 60 + seconds;\n\n//   useEffect(() => {\n//     let interval;\n\n//     if (isRunning && totalSeconds > 0) {\n//       interval = setInterval(() => {\n//         const remainingSeconds = totalSeconds - 1;\n//         setHours(Math.floor(remainingSeconds / 3600));\n//         setMinutes(Math.floor((remainingSeconds % 3600) / 60));\n//         setSeconds(remainingSeconds % 60);\n//       }, 1000);\n\n//     } else {\n//       clearInterval(interval);\n//     }\n\n//     return () => clearInterval(interval);\n//   }, [isRunning, totalSeconds]);\n\n//   const toggleRunning = () => {\n//     setIsRunning(!isRunning);\n\n//   };\n//   // const audioFilePath = '/audio/audio-file.mp3';\n//   useEffect(()=>{\n//     if(isRunning){\n//       if(hours===0 && minutes===0 && seconds===0){\n//         setIsRunning(false)\n//       }\n//       }\n//   })\n\n//   const resetTimer = () => {\n//     setHours(0);\n//     setMinutes(0);\n//     setSeconds(0);\n//     setIsRunning(false);\n//   };\n\n//   return (\n//     <div>\n\n//       <div className='Mu'>\n\n//         <div className=\"countdown-timer-container\">\n\n//         <CountdownCircleTimer\n//       isRunning\n//       duration={totalSeconds} \n//       // colors={['#004777', '#F7B801', '#A30000', '#A30000']}\n\n//       colors={['#004777', '#F7B801', '#A30000', '#A30000']}\n//       strokeWidth={6} // Adjust the stroke width as needed\n//       size={150} // Adjust the size of the timer as needed\n//       trailColor=\"transparent\" // Hide the trail\n//       isLinearGradient={true}\n//       rotation=\"counterclockwise\" // Make the animation counterclockwise\n\n//     >\n\n//       {({ remainingTime }) => (\n//         <div className=\"timer-text\">\n//         <div style={{ fontSize: 24 }}>{Math.floor(remainingTime / 3600).toString().padStart(2, '0')}:</div>\n//         <div style={{ fontSize: 24 }}>{Math.floor((remainingTime % 3600) / 60).toString().padStart(2, '0')}:</div>\n//         <div style={{ fontSize: 24 }}>{Math.floor(remainingTime % 60).toString().padStart(2, '0')}</div>\n//       </div>\n//       )}\n\n//     </CountdownCircleTimer>\n//         </div>\n\n//       <div>\n\n//         <div className=\"hs\">\n\n//           <div className='Hou'>\n//             <div>Hours</div>\n//             <img src={image} onClick={() => setHours(hours + 1)} className='siz'></img>\n//             <div>{hours}</div>\n//             <img src={image1} onClick={() => setHours(hours - 1)} className='siz'></img>\n//           </div>\n\n//           <div className='Hou'>\n//             <div>Minutes</div>\n//             <img src={image} onClick={() => setMinutes(minutes + 1)} className='siz'></img>\n//             <div>{minutes}</div>\n//             <img src={image1} onClick={() => setMinutes(minutes - 1)} className='siz'></img>\n//           </div>\n\n//           <div className='Hou'>\n//             <div>seconds</div>\n//             <img src={image} onClick={() => setSeconds(seconds + 1)} className='siz'></img>\n//             <div>{seconds}</div>\n//             <img src={image1} onClick={() => setSeconds(seconds - 1)} className='siz'></img>\n//           </div>\n\n//         </div>\n\n//         <div>      {isRunning && <button onClick={resetTimer} className='start'>Pause</button>}\n//       {!isRunning && <button onClick={toggleRunning} className='start'>Start</button>}</div>\n//       </div>\n\n//       </div>\n\n//     </div>\n//   );\n// }\n\n// export default Stopwatch;","map":{"version":3,"names":[],"sources":["C:/Users/HP/Desktop/CuvettReact/CapstoneProject/main/src/components/Stopwatch.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import image from '../assets/Vector_tri.png';\r\n// import image1 from '../assets/Vector_trr.png';\r\n// import './Stopwatch.css';\r\n// // import './CountdownTimer.css';\r\n// // import Counter from './Counter';\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import { CountdownCircleTimer } from 'react-countdown-circle-timer'\r\n// // let audioElement = new Audio('../assets/10.mp3');\r\n// // import React { useState, useEffect } from 'react';\r\n\r\n// function Stopwatch() {\r\n//   const [isRunning, setIsRunning] = useState(false);\r\n//   const [hours, setHours] = useState(0);\r\n//   const [minutes, setMinutes] = useState(0);\r\n//   const [seconds, setSeconds] = useState(0);\r\n\r\n// //   const formatTime = (h, m, s) => {\r\n// //     return `${h}h ${m}m ${s}s`;\r\n// //   };\r\n\r\n//   const totalSeconds = hours * 3600 + minutes * 60 + seconds;\r\n\r\n//   useEffect(() => {\r\n//     let interval;\r\n\r\n//     if (isRunning && totalSeconds > 0) {\r\n//       interval = setInterval(() => {\r\n//         const remainingSeconds = totalSeconds - 1;\r\n//         setHours(Math.floor(remainingSeconds / 3600));\r\n//         setMinutes(Math.floor((remainingSeconds % 3600) / 60));\r\n//         setSeconds(remainingSeconds % 60);\r\n//       }, 1000);\r\n\r\n//     } else {\r\n//       clearInterval(interval);\r\n//     }\r\n    \r\n//     return () => clearInterval(interval);\r\n//   }, [isRunning, totalSeconds]);\r\n\r\n//   const toggleRunning = () => {\r\n//     setIsRunning(!isRunning);\r\n    \r\n//   };\r\n//   // const audioFilePath = '/audio/audio-file.mp3';\r\n//   useEffect(()=>{\r\n//     if(isRunning){\r\n//       if(hours===0 && minutes===0 && seconds===0){\r\n//         setIsRunning(false)\r\n//       }\r\n//       }\r\n//   })\r\n \r\n\r\n//   const resetTimer = () => {\r\n//     setHours(0);\r\n//     setMinutes(0);\r\n//     setSeconds(0);\r\n//     setIsRunning(false);\r\n//   };\r\n   \r\n  \r\n//   return (\r\n//     <div>\r\n\r\n//       <div className='Mu'>\r\n\r\n        \r\n//         <div className=\"countdown-timer-container\">\r\n\r\n//         <CountdownCircleTimer\r\n//       isRunning\r\n//       duration={totalSeconds} \r\n//       // colors={['#004777', '#F7B801', '#A30000', '#A30000']}\r\n   \r\n\r\n//       colors={['#004777', '#F7B801', '#A30000', '#A30000']}\r\n//       strokeWidth={6} // Adjust the stroke width as needed\r\n//       size={150} // Adjust the size of the timer as needed\r\n//       trailColor=\"transparent\" // Hide the trail\r\n//       isLinearGradient={true}\r\n//       rotation=\"counterclockwise\" // Make the animation counterclockwise\r\n    \r\n//     >\r\n      \r\n//       {({ remainingTime }) => (\r\n//         <div className=\"timer-text\">\r\n//         <div style={{ fontSize: 24 }}>{Math.floor(remainingTime / 3600).toString().padStart(2, '0')}:</div>\r\n//         <div style={{ fontSize: 24 }}>{Math.floor((remainingTime % 3600) / 60).toString().padStart(2, '0')}:</div>\r\n//         <div style={{ fontSize: 24 }}>{Math.floor(remainingTime % 60).toString().padStart(2, '0')}</div>\r\n//       </div>\r\n//       )}\r\n    \r\n//     </CountdownCircleTimer>\r\n//         </div>\r\n\r\n\r\n//       <div>\r\n      \r\n//         <div className=\"hs\">\r\n          \r\n//           <div className='Hou'>\r\n//             <div>Hours</div>\r\n//             <img src={image} onClick={() => setHours(hours + 1)} className='siz'></img>\r\n//             <div>{hours}</div>\r\n//             <img src={image1} onClick={() => setHours(hours - 1)} className='siz'></img>\r\n//           </div>\r\n\r\n//           <div className='Hou'>\r\n//             <div>Minutes</div>\r\n//             <img src={image} onClick={() => setMinutes(minutes + 1)} className='siz'></img>\r\n//             <div>{minutes}</div>\r\n//             <img src={image1} onClick={() => setMinutes(minutes - 1)} className='siz'></img>\r\n//           </div>\r\n\r\n//           <div className='Hou'>\r\n//             <div>seconds</div>\r\n//             <img src={image} onClick={() => setSeconds(seconds + 1)} className='siz'></img>\r\n//             <div>{seconds}</div>\r\n//             <img src={image1} onClick={() => setSeconds(seconds - 1)} className='siz'></img>\r\n//           </div>\r\n\r\n//         </div>\r\n\r\n//         <div>      {isRunning && <button onClick={resetTimer} className='start'>Pause</button>}\r\n//       {!isRunning && <button onClick={toggleRunning} className='start'>Start</button>}</div>\r\n//       </div>\r\n\r\n//       </div>\r\n\r\n      \r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Stopwatch;\r\n\r\n\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;;AAGA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}