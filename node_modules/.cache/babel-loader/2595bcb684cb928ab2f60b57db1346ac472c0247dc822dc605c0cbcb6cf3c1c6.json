{"ast":null,"code":"import { __extends, __values } from \"tslib\";\nimport { Observable } from './Observable';\nimport { Subscription, EMPTY_SUBSCRIPTION } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { arrRemove } from './util/arrRemove';\nimport { errorContext } from './util/errorContext';\nvar Subject = function (_super) {\n  __extends(Subject, _super);\n  function Subject() {\n    var _this = _super.call(this) || this;\n    _this.closed = false;\n    _this.observers = [];\n    _this.isStopped = false;\n    _this.hasError = false;\n    _this.thrownError = null;\n    return _this;\n  }\n  Subject.prototype.lift = function (operator) {\n    var subject = new AnonymousSubject(this, this);\n    subject.operator = operator;\n    return subject;\n  };\n  Subject.prototype._throwIfClosed = function () {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n  };\n  Subject.prototype.next = function (value) {\n    var _this = this;\n    errorContext(function () {\n      var e_1, _a;\n      _this._throwIfClosed();\n      if (!_this.isStopped) {\n        var copy = _this.observers.slice();\n        try {\n          for (var copy_1 = __values(copy), copy_1_1 = copy_1.next(); !copy_1_1.done; copy_1_1 = copy_1.next()) {\n            var observer = copy_1_1.value;\n            observer.next(value);\n          }\n        } catch (e_1_1) {\n          e_1 = {\n            error: e_1_1\n          };\n        } finally {\n          try {\n            if (copy_1_1 && !copy_1_1.done && (_a = copy_1.return)) _a.call(copy_1);\n          } finally {\n            if (e_1) throw e_1.error;\n          }\n        }\n      }\n    });\n  };\n  Subject.prototype.error = function (err) {\n    var _this = this;\n    errorContext(function () {\n      _this._throwIfClosed();\n      if (!_this.isStopped) {\n        _this.hasError = _this.isStopped = true;\n        _this.thrownError = err;\n        var observers = _this.observers;\n        while (observers.length) {\n          observers.shift().error(err);\n        }\n      }\n    });\n  };\n  Subject.prototype.complete = function () {\n    var _this = this;\n    errorContext(function () {\n      _this._throwIfClosed();\n      if (!_this.isStopped) {\n        _this.isStopped = true;\n        var observers = _this.observers;\n        while (observers.length) {\n          observers.shift().complete();\n        }\n      }\n    });\n  };\n  Subject.prototype.unsubscribe = function () {\n    this.isStopped = this.closed = true;\n    this.observers = null;\n  };\n  Object.defineProperty(Subject.prototype, \"observed\", {\n    get: function () {\n      var _a;\n      return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Subject.prototype._trySubscribe = function (subscriber) {\n    this._throwIfClosed();\n    return _super.prototype._trySubscribe.call(this, subscriber);\n  };\n  Subject.prototype._subscribe = function (subscriber) {\n    this._throwIfClosed();\n    this._checkFinalizedStatuses(subscriber);\n    return this._innerSubscribe(subscriber);\n  };\n  Subject.prototype._innerSubscribe = function (subscriber) {\n    var _a = this,\n      hasError = _a.hasError,\n      isStopped = _a.isStopped,\n      observers = _a.observers;\n    return hasError || isStopped ? EMPTY_SUBSCRIPTION : (observers.push(subscriber), new Subscription(function () {\n      return arrRemove(observers, subscriber);\n    }));\n  };\n  Subject.prototype._checkFinalizedStatuses = function (subscriber) {\n    var _a = this,\n      hasError = _a.hasError,\n      thrownError = _a.thrownError,\n      isStopped = _a.isStopped;\n    if (hasError) {\n      subscriber.error(thrownError);\n    } else if (isStopped) {\n      subscriber.complete();\n    }\n  };\n  Subject.prototype.asObservable = function () {\n    var observable = new Observable();\n    observable.source = this;\n    return observable;\n  };\n  Subject.create = function (destination, source) {\n    return new AnonymousSubject(destination, source);\n  };\n  return Subject;\n}(Observable);\nexport { Subject };\nvar AnonymousSubject = function (_super) {\n  __extends(AnonymousSubject, _super);\n  function AnonymousSubject(destination, source) {\n    var _this = _super.call(this) || this;\n    _this.destination = destination;\n    _this.source = source;\n    return _this;\n  }\n  AnonymousSubject.prototype.next = function (value) {\n    var _a, _b;\n    (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.call(_a, value);\n  };\n  AnonymousSubject.prototype.error = function (err) {\n    var _a, _b;\n    (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.call(_a, err);\n  };\n  AnonymousSubject.prototype.complete = function () {\n    var _a, _b;\n    (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);\n  };\n  AnonymousSubject.prototype._subscribe = function (subscriber) {\n    var _a, _b;\n    return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : EMPTY_SUBSCRIPTION;\n  };\n  return AnonymousSubject;\n}(Subject);\nexport { AnonymousSubject };","map":{"version":3,"names":["Observable","Subscription","EMPTY_SUBSCRIPTION","ObjectUnsubscribedError","arrRemove","errorContext","Subject","_super","__extends","_this","call","closed","observers","isStopped","hasError","thrownError","prototype","lift","operator","subject","AnonymousSubject","_throwIfClosed","next","value","copy","slice","copy_1","__values","copy_1_1","done","observer","error","err","length","shift","complete","unsubscribe","Object","defineProperty","get","_a","_trySubscribe","subscriber","_subscribe","_checkFinalizedStatuses","_innerSubscribe","push","asObservable","observable","source","create","destination","_b","subscribe"],"sources":["C:\\Users\\HP\\node_modules\\rxjs\\src\\internal\\Subject.ts"],"sourcesContent":["import { Operator } from './Operator';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, EMPTY_SUBSCRIPTION } from './Subscription';\nimport { Observer, SubscriptionLike, TeardownLogic } from './types';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { arrRemove } from './util/arrRemove';\nimport { errorContext } from './util/errorContext';\n\n/**\n * A Subject is a special type of Observable that allows values to be\n * multicasted to many Observers. Subjects are like EventEmitters.\n *\n * Every Subject is an Observable and an Observer. You can subscribe to a\n * Subject, and you can call next to feed values as well as error and complete.\n */\nexport class Subject<T> extends Observable<T> implements SubscriptionLike {\n  closed = false;\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  observers: Observer<T>[] = [];\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  isStopped = false;\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  hasError = false;\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  thrownError: any = null;\n\n  /**\n   * Creates a \"subject\" by basically gluing an observer to an observable.\n   *\n   * @nocollapse\n   * @deprecated Recommended you do not use. Will be removed at some point in the future. Plans for replacement still under discussion.\n   */\n  static create: (...args: any[]) => any = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  };\n\n  constructor() {\n    // NOTE: This must be here to obscure Observable's constructor.\n    super();\n  }\n\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = operator as any;\n    return subject as any;\n  }\n\n  /** @internal */\n  protected _throwIfClosed() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n  }\n\n  next(value: T) {\n    errorContext(() => {\n      this._throwIfClosed();\n      if (!this.isStopped) {\n        const copy = this.observers.slice();\n        for (const observer of copy) {\n          observer.next(value);\n        }\n      }\n    });\n  }\n\n  error(err: any) {\n    errorContext(() => {\n      this._throwIfClosed();\n      if (!this.isStopped) {\n        this.hasError = this.isStopped = true;\n        this.thrownError = err;\n        const { observers } = this;\n        while (observers.length) {\n          observers.shift()!.error(err);\n        }\n      }\n    });\n  }\n\n  complete() {\n    errorContext(() => {\n      this._throwIfClosed();\n      if (!this.isStopped) {\n        this.isStopped = true;\n        const { observers } = this;\n        while (observers.length) {\n          observers.shift()!.complete();\n        }\n      }\n    });\n  }\n\n  unsubscribe() {\n    this.isStopped = this.closed = true;\n    this.observers = null!;\n  }\n\n  get observed() {\n    return this.observers?.length > 0;\n  }\n\n  /** @internal */\n  protected _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    this._throwIfClosed();\n    return super._trySubscribe(subscriber);\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    this._throwIfClosed();\n    this._checkFinalizedStatuses(subscriber);\n    return this._innerSubscribe(subscriber);\n  }\n\n  /** @internal */\n  protected _innerSubscribe(subscriber: Subscriber<any>) {\n    const { hasError, isStopped, observers } = this;\n    return hasError || isStopped\n      ? EMPTY_SUBSCRIPTION\n      : (observers.push(subscriber), new Subscription(() => arrRemove(observers, subscriber)));\n  }\n\n  /** @internal */\n  protected _checkFinalizedStatuses(subscriber: Subscriber<any>) {\n    const { hasError, thrownError, isStopped } = this;\n    if (hasError) {\n      subscriber.error(thrownError);\n    } else if (isStopped) {\n      subscriber.complete();\n    }\n  }\n\n  /**\n   * Creates a new Observable with this Subject as the source. You can do this\n   * to create customize Observer-side logic of the Subject and conceal it from\n   * code that uses the Observable.\n   * @return {Observable} Observable that the Subject casts to\n   */\n  asObservable(): Observable<T> {\n    const observable: any = new Observable<T>();\n    observable.source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(\n    /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n    public destination?: Observer<T>,\n    source?: Observable<T>\n  ) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    this.destination?.next?.(value);\n  }\n\n  error(err: any) {\n    this.destination?.error?.(err);\n  }\n\n  complete() {\n    this.destination?.complete?.();\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    return this.source?.subscribe(subscriber) ?? EMPTY_SUBSCRIPTION;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}